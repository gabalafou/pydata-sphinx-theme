/**
 * Styles for various Sphinx execution libraries to display pre-executed notebooks.
 * For now, where these define output sections, we simply revert their background
 * to be a "light theme" background. This ensures that inputs/outputs behave similarly,
 * because the CSS is often controlled by each package.
 * In the future, we might add dark theme support for specific packages.
 */

/*******************************************************************************
 * nbsphinx
 */
html div.rendered_html,
// NBsphinx ipywidgets output selector
html .jp-RenderedHTMLCommon {
  // Add some margin around the element box for the focus ring. Otherwise the
  // focus ring gets clipped because the containing elements have `overflow:
  // hidden` applied to them (via the `.lm-Widget` selector)
  margin: $focus-ring-width;

  table {
    table-layout: auto;
  }
}

.bd-content .nboutput {
  .output_area {
    &.rendered_html,
    .jp-RenderedHTMLCommon {
      // pandas
      table.dataframe {
        @include table-colors;

        tbody {
          tr:hover {
            background-color: var(--pst-color-table-row-hover-bg);
          }
        }
      }
    }

    // Dark theme special-cases
    html[data-theme="dark"] & {
      &.rendered_html:not(:has(table.dataframe)),
      // ipywidgets
      .widget-subarea {
        @include cell-output-background;
      }
    }
  }
}

// The following block implements Isabela's design for notebook code cells:
// https://github.com/Quansight-Labs/czi-scientific-python-mgmt/issues/142#issuecomment-2759132381.
// They selectors are all nested under .bd-article-container so that they have
// higher specificity and can therefore override the rules in the nbphinx
// stylesheet.
.bd-article-container {
  $space-between-vertical-bar-and-cell: 1em;
  $top-and-bottom-container-space: 1.2em;

  // Common styles for both input and output containers
  div.nbinput.container,
  div.nboutput.container {
    display: block; // override nbsphinx display: flex
    position: relative; // needed for the absolute positioning of the ::before pseudo-element

    // This is the vertical bar that connects the input and output containers
    &::before {
      content: "";
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: 0.2em;
      background: var(--pst-color-success);

      // TODO: figure out a way to create a single vertical bar that runs the
      // entire height of both the input and output cells, rather than two
      // stacked bars, that way we can add border radius to the ends without it
      // looking funky.

      // border-radius: 1px;
    }

    // This is the label for the input or output
    div.prompt {
      width: auto; // override nbsphinx
      margin-bottom: 0.7em; // space between the label and the input or output
      padding-top: 0; // override nbsphinx - all whitespace is managed by the margin-bottom rule above

      // Create space between the prompt and the vertical bar. This reason that
      // we do not put the padding inside the left edge of the container is that
      // we need to add padding to the inputs and outputs so that if they are
      // focusable the focus ring will be visible. Nbsphinx has a lot of
      // `overflow: auto` or `overflow: hidden` rules so without a padding area
      // in which to draw the focus ring, it would be otherwise hidden.
      margin-left: $space-between-vertical-bar-and-cell;

      div.highlight {
        position: static; // override nbsphinx - position: absolute

        pre {
          color: inherit; // override nbsphinx - get the color from PST rules applied to the parent elements
        }
      }
    }
  }

  // Input-specific styles
  div.nbinput.container {
    margin-top: $top-and-bottom-container-space; // space between the top of the notebook cell and the surrounding content
    padding-top: 0; // override nbsphinx - let the apparent whitespace be controlled by the margin-top rule above

    // Prefix the cell number with the word "In".
    // TODO: add to translations
    div.prompt pre::before {
      content: "In ";
    }

    div.input_area {
      border: none; // border taken care of by <pre> styles elsewhere in the theme
      padding: $focus-ring-width; // give the input_area a padding area in which to draw the focus ring
      margin-left: $space-between-vertical-bar-and-cell;

      > div.highlight {
        overflow: visible; // necessary for focus ring
      }
    }
  }

  // Output-specific styles
  div.nboutput.container {
    // Space between the input portion and the output portion. Cannot use margin
    // here because we do not want to create a break in the vertical bar running
    // down the left side.
    padding-top: $top-and-bottom-container-space;

    // Prefix the cell number with the word "Out". TODO: add to translations
    div.prompt pre::before {
      content: "Out ";
    }

    div.output_area {
      // Override nbsphinx. Things like box shadows on elements that are
      // children of div.output_area do not work if the overflow is not set to
      // visible. But do not apply to .rendered_html because it could be, for
      // example, a long pandas data table that is rendered without a
      // non-overflowing container.
      &:not(.rendered_html) {
        overflow: visible;
      }

      // What this selector attempts to do is to override a bunch of CSS rules
      // that come from multiple places that add top and bottom whitespace to elements,
      // like paragraph elements. These rules mess up the alignment between
      // bottom of the notebook cell content and the left bar that we've added.
      // They also create unnecessary extra whitespace at the bottom of notebook
      // cells. However, this selector may be a bit too wide, too blunt. We may
      // need find a different way to achieve this.
      :not(.highlight, .widget-tab-contents, .jupyter-widgets):last-child {
        margin-top: 0;
        margin-bottom: 0;
      }

      &,
      // must have this second selector, `&.rendered_html`, to override nbsphinx's padding rules
      &.rendered_html {
        margin-left: $space-between-vertical-bar-and-cell;
        padding-left: 0;
      }

      div.highlight,
      .jupyter-widgets,
      .jupyter-matplotlib-canvas-container {
        overflow: visible; // for focus ring
      }

      // use theme color for stderr
      &.stderr {
        background-color: transparent;

        div[class*="highlight"] > pre {
          background-color: var(--pst-color-danger-bg);
        }
      }
    }
  }

  // Override nbsphinx's styles with our own <pre> tag styles
  div.nbinput.container div.input_area div[class*="highlight"] > pre,
  div.nboutput.container div.output_area div[class*="highlight"] > pre {
    @extend %pre-style;

    margin: 0;
  }

  // Last container styles
  div.container.nblast {
    margin-bottom: $top-and-bottom-container-space;

    // override nbsphinx's padding rule. Let the whitespace be controlled by the
    // margin-bottom rule above. This is important because if we achieve
    // whitespace with padding instead of margin, then we create a misalignment
    // between the vertical left bar and the bottom of the notebook cell.
    padding-bottom: 0;
  }
}

/*******************************************************************************
 * myst NB
 */

div.cell_output .output {
  max-width: 100%;
  overflow-x: auto;
}

.bd-content div.cell_output {
  // pandas
  table.dataframe {
    @include table-colors;

    tbody {
      tr:hover {
        background-color: var(--pst-color-table-row-hover-bg);
      }
    }
  }

  html[data-theme="dark"] & {
    img,
    .text_html:not(:has(table.dataframe)),
    // ipywidgets
    .widget-subarea {
      @include cell-output-background;
    }
  }
}

// Prevent tables from scrunching together
.bd-content {
  div.cell_input {
    display: flex;
    flex-direction: column;
    justify-content: stretch;
  }

  div.cell_input,
  div.output {
    border-radius: $admonition-border-radius;
  }

  div.output {
    table {
      table-layout: auto;
    }
  }
}
